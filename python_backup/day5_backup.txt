'''

CLASS example

author:dhivya

date 01/12/2017

'''


class math_operator:

  def add(self,a,b):

    c=a+b

    return c

  def sub(self,a,b):

    c=a-b

    return c

#if__name__=="__main__":

a=6

b=3

obj=math_operator()

out=obj.add(a,b)

print(out)

out=obj.sub(a,b)

print(out)






'''
CLASS example 

author:dhivya

date 01/12/2017

'''
class math_operator:

  def __init__(self):

    print("init block")

    
  def add(self,a,b):

    c=a+b

    return c

  def sub(self,a,b):

    c=a-b

    return c

a=4

b=3

obj=math_operator()



'''
CLASS example passing arguments to classname

assigning it in self block and using in other functions.

init block acts as a constructor.

when the obj is created for class, init gets invoked


author:dhivya


date 01/12/2017
'''


class math_operator:

  def __init__(self,a,b):

    print("init block")

    self.a=a

    self.b=b

    pass

  def add(self):

    c=self.a+self.b

    return c

  def sub(self):

    c=self.a-self.b

    return c


obj=math_operator(7,1)

out=obj.add()

print(out)

out=obj.sub()

print(out)




'''
CLASS example 
init as constructor


author:dhivya


date 01/12/2017
'''


class math_operator:

  def __init__(self):

    print("init block")

obj=math_operator()




'''
CLASS example
 calling functions inside init


author:dhivya


date 01/12/2017
'''


class math_operator:

  def __init__(self,a,b):

    self.a=a

    self.b=b

    out=self.add()

    print(out)

    out=self.sub()

    print(out)
 
  def add(self):

    c=self.a+self.b

    return c

  def sub(self):

    c=self.a-self.b

    return c


obj=math_operator(5,1)



'''
CLASS getting the string in 1 function

and printing it in upprcase in another function


author: dhivya


date:01/12/2017
'''


class sample:

  def __init__(self):

    print("init block")

    self.getstring()

    self.printstring()

  def getstring(self):

    a=raw_input("enter a string")

    self.a=a
  def printstring(self):

    print (self.a.upper())

obj=sample()





'''
converting 2 list into dictionaries
'''

l=[1,2,3]

m=[344,56,785]

print zip(l,m)#tuples within list


print dict(zip(l,m))#dictionary



'''
inheritence example in class
'''

class A:

  def __init__(self):

    print("init block of A")

  def getstring(self):

    a=raw_input("enter the string:")

    self.a=a

    obj.printstring()

    
class B(A):

  def __init__(self):

    print("inside b block")

  def printstring(self):

    print self.a.upper()

    
obj=B()

obj.getstring()

